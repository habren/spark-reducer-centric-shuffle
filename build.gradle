buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:4.0.1'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.4.0'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.6'
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.4"
        classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.5'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'com.google.protobuf'

    group = 'com.jasongj.bigdata'
    version = '1.0'

    description = """"""

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    ext {
        hiveVersion = '1.2.1'
        hadoopVersion = '2.7.3'
        sparkVersion = '2.3.2'
        parquetVersion = '1.7.0'
        avroVersion = '1.7.7'
        kafkaVersion = '0.10.1.1'
        log4j2Version = '2.7'
        slf4jVersion = '1.7.25'
        grpcVersion = '1.16.1'
        rocksdb = '5.15.10'
        protocVersion = '3.6.1'
    }

    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url 'http://repo.spring.io/plugins-release' }
    }

//plugins {
//    id 'nebula.provided-base' version '3.0.3' // if you want provided-base
//}
    
    configurations {

        all*.exclude group: 'ch.qos.logback'
        all*.exclude module: 'slf4j-log4j12'
//        all*.exclude module: 'log4j'
        all*.exclude group: 'org.pentaho'
        all*.exclude module: 'apache-curator'
        all*.exclude group: 'org.eclipse.jetty.aggregate'
        all*.exclude group: 'org.eclipse.jetty.orbit'
        all*.exclude group: 'commons-logging'
        all*.exclude module: 'apache-log4j-extras'
    }

    protobuf {
        protoc {
            artifact = 'com.google.protobuf:protoc:' + protocVersion
        }
        plugins {
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:' + grpcVersion
            }
        }
        generatedFilesBaseDir = "src"
        generateProtoTasks {
            all()*.plugins {
                grpc {
                    outputSubDir = 'java'
                }
            }
        }
    }
    
    jar {
        /*manifest {
            attributes "Main-Class" : "com.jasongj.spark.driver.SparkBucketJoin"
        }*/

        baseName = project.name + '-with-dependencies'
        zip64 = true
        from {
            /*(configurations.compile - configurations.provided).collect {
                it.isDirectory() ? it : zipTree(it)
            }*/
//            (configurations.compile - configurations.provided).collect {
//                it.isDirectory() ? it : zipTree(it)
//            }
        } {
            exclude "META-INF/*"
            exclude "META-INF/services/*"
            exclude "META-INF/maven/*"
//        exclude "META-INF/*.DSA"
//        exclude "META-INF/*.RSA"
        }
    }


//task listJars(description: 'Display all compile jars.') {
////    doLast{
////        (configurations.compile - configurations.sparkProvided).each { File file -> println file.name }
////    }
////}


    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
                srcDirs 'src/main/grpc'
            }
            scala {
                srcDirs = ['src/main/scala']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
        test {
            java {
                srcDirs = ['src/test/java']
            }
            scala {
                srcDirs = ['src/test/scala']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }

    dependencies {

        compile(
                [group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion],
                [group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4j2Version],
                [group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4j2Version],
                [group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4j2Version],
                [group: 'org.projectlombok', name: 'lombok', version:'1.16.12'],
                [group: 'org.testng', name: 'testng', version: '6.14.3'],
                [group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4jVersion],
                [group: 'io.grpc', name: 'grpc-netty', version: grpcVersion]

        )
    }
}

apply plugin: 'idea'


idea {
//    classpath {
//        downloadSources=true
//        downloadDocs=true
//    }
}

//apply plugin: 'nebula.provided-base'

task createWrapper(type: Wrapper) {
    gradleVersion = '4.9'
}
